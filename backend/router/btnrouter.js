const express = require('express');
const router = express.Router();
const pool = require('../db'); // DB Ïó∞Í≤∞

const getDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371000; // ÏßÄÍµ¨ Î∞òÏßÄÎ¶Ñ (ÎØ∏ÌÑ∞)
    const toRad = (degree) => (degree * Math.PI) / 180;

    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
};

router.post('/destination', async (req, res) => {
    const {orderId, robotId, destX, destY}=req.body;
    const connect = await pool.getConnection();

    if(!orderId || !robotId || !destX || !destY){
        return res.status(400).json({error : "ÌïÑÏàò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§"})
    }

    try {

        await connect.beginTransaction();

        // 1. Ï£ºÎ¨∏ ÏÉÅÌÉú -> Î∞∞Îã¨ Ï§ë

        const endOrderUpdateSql=`
        UPDATE orders 
        SET order_status='Î∞∞Îã¨ Ï§ë
        where orders_idx=?`
        await connect.query(endOrderUpdateSql, [orderId]);

        const endInsertRobotStatusSql=`
        INSERT INTO robots_status_logs (robots_idx, status, updated_at)
        VALUES (?, 'Î™©Ï†ÅÏßÄ Ïù¥Îèô Ï§ë', NOW())
        ON DUPLICATE KEY UPDATE updated_at=NOW()`

        await connect.query(endInsertRobotStatusSql, [robotId]);

        await connect.commit();
        connect.release();

        console.log(`Ï£ºÎ¨∏ (${orderId}) ÏÉÅÌÉú 'Î∞∞Îã¨Ï§ë', Î°úÎ¥á(${robotId}) ÏÉÅÌÉú 'Î™©Ï†ÅÏßÄ Ïù¥Îèô Ï§ë' ÏÑ§Ï†ï ÏôÑÎ£å`)


        console.log(`${robotId} 10Ï¥à ÌõÑ Î™©Ï†ÅÏßÄÎ°ú Ïù¥Îèô ÏãúÏûë ÏòàÏ†ï`)

        setTimeout(async ()=>{
            let destIndex=0;

            const destPath=[
                { y: 126.911953, x: 35.149272 }, // ÏãúÏûëÏ†ê
                { y: 126.910838, x: 35.150258 },
                { y: 126.912537, x: 35.151778 }, // Ï§ëÍ∞Ñ ÏßÄÏ†ê
                { y: 126.914179, x: 35.150855 },
                { y: 126.916067, x: 35.150604 },
            ];


            const interval=setInterval(async ()=>{
                if(destIndex >= destPath.length){
                    clearInterval(interval);
                    console.log(`${robotId} Îß§Ïû• ÎèÑÏ∞© `)

                    const endStatusSql= `UPDATE robots_status_logs SET status='Î∞∞Îã¨ ÏôÑÎ£å'
                        WHERE robots_idx=?`

                    await pool.query(endStatusSql,[robotId])

                    return;
                }

                const endNextPos=destPath[destIndex];

                const endLagLngUpdateSql=`UPDATE robots_coord_logs SET 
                rbs_x_coord=?, rbs_y_coord=? WHERE robots_idx=?`

                await pool.query(endLagLngUpdateSql,[endNextPos.x,endNextPos.y,robotId])

                console.log(`${robotId} Ïù¥Îèô Ï§ë: ${endNextPos.x}, ${endNextPos.y}`)


                const endDistance=getDistance(endNextPos.x, endNextPos.y, destX, destY);
                if (endDistance <=20){
                    console.log(`${robotId} ÎèÑÏ∞©ÏßÄ Î∞òÍ≤Ω 20m ÎÇ¥ ÎèÑÏ∞© ! Î∞∞Îã¨ÏôÑÎ£åÎ°ú ÏÉÅÌÉú Î≥ÄÍ≤Ω`)

                    const endCheckStatusSql=`SELECT status FROM robots_status_logs
                                        WHERE robots_idx=?
                                        ORDER BY updated_at desc LIMIT 1`

                    const [endStatusRows]= await pool.query(endCheckStatusSql, [robotId]);
                    console.log(endStatusRows);

                    if (endStatusRows.length===0 || endStatusRows[0].status !=='Î∞∞Îã¨ ÏôÑÎ£å'){
                        const endStatusChangeSql=`INSERT INTO robots_status_logs (robots_idx, status, updated_at)
                                                    VALUES (?, 'Î∞∞Îã¨ ÏôÑÎ£å', NOW())
                                                    ON DUPLICATE KEY UPDATE updated_at = NOW()`
                        await pool.query(endStatusChangeSql, [robotId]);
                        console.log(`${robotId} ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏôÑÎ£å`)

                        const endOrderStatusChangeSql=`UPDATE orders 
                        SET order_status='ÏôÑÎ£å' WHERE orders_idx=?
                        `
                        await pool.query(endOrderStatusChangeSql, [orderId])

                    }else{
                        console.log(`${robotId} Ïù¥ÎØ∏ ÌîΩÏóÖ ÎåÄÍ∏∞ ÏÉÅÌÉú`)
                    }

                    clearInterval(interval);
                }
                destIndex++;
            }, 2000);

        }, 2000);

        await connect.commit();

        res.json({message : "10Ï¥à ÌõÑ Î°úÎ¥á Î™©Ï†ÅÏßÄÎ°ú Ïù¥ÎèôÏù¥ ÏãúÏûëÎê©ÎãàÎã§.", robotId, orderId});
    } catch (error) {
        console.error("üö® Î°úÎ¥á Î™©Ï†ÅÏßÄ Ïù¥Îèô ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:", error);
        res.status(500).json({ error: "Î°úÎ¥á Î™©Ï†ÅÏßÄ Ïù¥Îèô ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò Î∞úÏÉù" });
    }finally{
        connect.release()
    }
});




module.exports=router;